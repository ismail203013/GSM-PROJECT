@page "/product/{id:int}"
@inject IProductService ProductService 
@inject ILocalStorageService LocalStorage
@inject ICartService CartService
@inject IToastService ToastService



<div class="media"> 
    <div class="media-img-big-wrapper">
        <img class="media-img-big" src="@product.Image" alt="@product.Title" /> 
    </div>
    <div class= "media-body">
        <h2 class="mb-0">@product.Title</h2>
        <p>@product.Description</p>
        @if (product.Variants !=null && product.Variants.Count > 1 )
        {
            <div class="form-group">
                <select class="form-control"@bind="currentEditionId" >
                    @foreach(var variant in product.Variants)
                    {
                        <option value="@variant.EditionId">@variant.Edition.Name</option>
                    }
                           }
                </select>
            </div>
        }
        @if (GetSelectedVariant() != null)
        {


            @if (GetSelectedVariant().OriginalPrice > GetSelectedVariant().Price) //checks to see if price is discounted or not
            {
                <h6 class="original-price">£@GetSelectedVariant().OriginalPrice</h6>
            }
            <h4 class="price">£@GetSelectedVariant().Price</h4>
        }
        <button class=btn-primary @onclick="AddToCart"><i class="oi-cart"></i>&nbsp;&nbsp;&nbsp; Add to cart</button>

    </div>
</div>

@code {
    private Product product = new Product();

    [Parameter]
    public int Id { get; set; }

    private int currentEditionId = 1;

    protected override async Task OnInitializedAsync()
    {
        //extra security making sure products are loaded
        // if (ProductService.Products == null || ProductService.Products.Count == 0)
        //{
        //  ProductService.LoadProducts();
        // }
        product = await ProductService.GetProduct(Id); //Products.FirstOrDefault(p => p.Id == Int32.Parse(Id)); //else pass the id
        if(product.Variants.Count > 0 )
        {
            currentEditionId = product.Variants[0].EditionId;

        }

    }

    private ProductVariant GetSelectedVariant()
    {
        var variant = product.Variants.FirstOrDefault(v => v.EditionId == currentEditionId);
        return variant;
    }

    private async Task AddToCart()  
    {
        await CartService.AddToCart(GetSelectedVariant());
        //ToastService.ShowSuccess(product.Title, "Added to Cart");
    }
}
