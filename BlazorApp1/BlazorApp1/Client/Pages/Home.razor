@page "/"
@inject ICategoryService CategoryService;
@inject IProductService ProductService;


<h3 class="home-title">Our Best Sellers</h3>


<body>
<div class="grid-container">
  <div class="homepage-item">
      @foreach (var product in ProductService.Products.Take(1))
    {
        
            <div class="media-img-wrapper">
                <a href="/product/@product">
                   <img class="media-img" src="@product.Image" alt="@product.Title" />
                    </a>
            </div>
           <div class="media-body">
               <a href="/product/@product.Id">
                   <h4 class="mb-0"> @product.Title</h4>
               </a>
          <br>
                <h5 class="price">
                   @GetPrice(product)
                </h5>
            </div>
        
    }
    </div>
    <div class="homepage-item">
        @foreach (var product in ProductService.Products.TakeLast(1))
    {
            <div class="media-img-wrapper">
                <a href="/product/@product">
                   <img class="media-img" src="@product.Image" alt="@product.Title" />
                    </a>
            </div>
           <div class="media-body">
               <a href="/product/@product.Id">
                   <h4 class="mb-0"> @product.Title</h4>
               </a>
          <br>
                <h5 class="price">
                   @GetPrice(product)
                </h5>
            </div>
        
    }

    </div>

    <div class="homepage-item">
        @foreach (var product in ProductService.Products.Skip(1).Take(1))
    {
          <div class="media-img-wrapper">
                <a href="/product/@product">
                   <img class="media-img" src="@product.Image" alt="@product.Title" />
                    </a>
            </div>
           <div class="media-body">
               <a href="/product/@product.Id">
                   <h4 class="mb-0"> @product.Title</h4>
               </a>
          <br>
                <h5 class="price">
                   @GetPrice(product)
                </h5>
            </div>
       
    }

    </div>
     
     
</div>

<h4 class="heading"> What We Provide</h4>

<p class="text">
    We provide a range of services, including mobile repair, money transfer, 
    and UPS pick-up. Mobile repair services may include fixing damaged screens, 
    replacing batteries, and resolving software issues on smartphones and other 
    mobile devices. The money transfer service allows customers to send and receive 
    money both domestically and internationally. Lastly, the UPS pick-up service enables 
    customers to drop off packages for delivery through UPS. 
</p>
<div class="center">
<a href="/about">Find out more </a>
</div>




<h4 class="heading">Why GSM</h4>
<p class="text">
    Your shop offers a range of essential services, including mobile repair, money transfer,
    and UPS pick-up, that customers need in their daily lives. What sets your shop apart 
    is the quality of services, as your skilled technicians are trained in the latest repair 
    techniques and technologies, ensuring that mobile devices are repaired quickly and efficiently. 
    Moreover, your shop offers competitive pricing with no hidden fees, which helps customers to get 
    value for their money.
</p>

</body>
@code {

     public string CategoryUrl { get; set; }

    private Category category = null;

    protected override void OnInitialized()
    {
        //await  ProductService.LoadProducts(); // loading in the list of products
       ProductService.OnChange += StateHasChanged; //reloads products if any change is made
                                                    //   items = await DbContext.Products.Take(3).ToListAsync();
     
    }
     protected override async Task OnParametersSetAsync()
    {

        //calling the product service 
      await  ProductService.LoadProducts(CategoryUrl);

        if (CategoryUrl != null) //making sure category url is not null
        {

            category = CategoryService.Categories.FirstOrDefault(c => c.Url.ToLower().Equals(CategoryUrl.ToLower()));

        }
        else
        {
            category = null;
        }

    }
    public  void Dispose()
    {
        ProductService.OnChange -= StateHasChanged;
    }
    private string GetPrice(Product product)
    {
        var variants = product.Variants;
        if (variants.Count == 0) // if the product has no variants
        {
            return string.Empty;
        }
        else if (variants.Count == 1) // if there is one vairant display default price
        {
            return $"£{variants[0].Price}";

        }
        decimal minPrice = variants.Min( v => v.Price); //if there is more than two display lowest price
        return $"Starting at £{minPrice}";

    }
   



}
