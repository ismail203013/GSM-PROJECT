@inject IProductService ProductService
@implements IDisposable

<ul class="list-unstyled">
    @foreach (var product in ProductService.Products)
    {
        <li class= "media">
            <div class="media-img-wrapper">
                <a href="/product/@product.Id">
                   <img class="media-img" src="@product.Image" alt="@product.Title" />
                    </a>
            </div>
           <div class="media-body">
               <a href="/product/@product.Id">
                   <h4 class="mb-0"> @product.Title</h4>
               </a>
               <p>@product.Description</p>
               
                <h5 class="price">
                    @GetPrice(product)
                </h5>
            </div>
        </li>
    }

</ul>

@code {
    // [Parameter]

    //passing category id 
    // public int? CategoryId { get; set; } = null; 

    protected override void OnInitialized()
    {
        //await  ProductService.LoadProducts(); // loading in the list of products
        ProductService.OnChange += StateHasChanged; //reloads products if any change is made
    }
    public  void Dispose()
    {
        ProductService.OnChange -= StateHasChanged;
    }
    private string GetPrice(Product product)
    {
        var variants = product.Variants;
        if (variants.Count == 0) // if the product has no variants
        {
            return string.Empty;
        }
        else if (variants.Count == 1) // if there is one vairant display default price
        {
            return $"£{variants[0].Price}";

        }
        decimal minPrice = variants.Min( v => v.Price); //if there is more than two display lowest price
        return $"Starting at £{minPrice}";

    }
}
